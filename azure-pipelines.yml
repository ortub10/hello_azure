# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
      - feature 

pool:
  name: githubAgent

variables:
  Major: "1"
  Minor: "0"
  Patch: $(Build.BuildId)
  buildVersion: "$(Major).$(Minor).$(Patch)"  
  packageName: "$(Major).$(Minor).$(Patch)-$(Build.SourceBranchName)"
  

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: UseNode@1
  inputs:
    version: '23.x'

- script: |
    dotnet build --configuration Release
  displayName: 'Build the project'


- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Tool'
    
- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'

  
- task: SonarQubePrepare@6
  condition: eq(variables['Build.SourceBranch'], 'feature')  
  inputs:
    SonarQube: 'SonarQubeConnection'  
    scannerMode: 'MSBuild'
    projectKey: 'azure'  
    projectName: 'azure'
   

- task: SonarQubeAnalyze@6
  condition: eq(variables['Build.SourceBranch'], 'feature')
  inputs:
    SonarQube: 'SonarQubeConnection'

- task: SonarQubePublish@6
  condition: eq(variables['Build.SourceBranch'], 'feature')
  inputs:
    SonarQube: 'SonarQubeConnection'
    pollingTimeoutSec: '300'
  

- task: DotNetCoreCLI@2
  condition: eq(variables['Build.SourceBranchName'], 'feature')
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    buildProperties: 'PackageIdPrefix=$(packageName).'  
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'buildVersion' 

    
        
    
- script: |
    echo "Version: $(buildVersion)"
  displayName: "Print Version to Console"    


- task: DotNetCoreCLI@2
  condition: eq(variables['Build.SourceBranchName'], 'feature')
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'b1fdba62-71d1-4e08-8819-7560108d13fb/003c6320-d931-4821-8436-7ef7094cb2fc'
    arguments: '--skip-duplicate'
    
    
-  script: |
    SUBJECT="Azure DevOps Pipeline Status: $(Build.DefinitionName) - $(Build.BuildId)"
    BODY="On $(Build.Repository.Provider) - $(Build.Repository.Name) Repository:"
    BODY="${BODY}The build pipeline has completed with status: $(Agent.JobStatus)\n\n"
    BODY="${BODY}Pipeline Name: $(Build.DefinitionName)\n"
    BODY="${BODY}Branch: $(Build.SourceBranchName)\n"
    BODY="${BODY}Go To Repo: $(Build.Repository.Uri)\n"      
    curl -v --url 'smtp://smtp.gmail.com:587' --ssl-reqd \
        --mail-from "$(GMAIL_USER)" --mail-rcpt "$(GMAIL_USER)" \
        --upload-file <(echo -e "Subject: $SUBJECT\n\n$BODY") \
        --user "$(GMAIL_USER):$(GMAIL_PASSWORD)" --insecure
   displayName: 'Send Pipeline Status Email'
   condition: always()
    
